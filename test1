use nix::libc::siginfo_t;
use nix::sys::signal::{sigaction, SigAction, SigHandler, SigSet, Signal};
use std::error::Error;
use std::os::raw::{c_int, c_void};
use std::fs::File;
use std::io::Read;
use std::path::Path;
use std::io::{self, Write}; // Import Write trait

mod runner;

extern "C" fn sigsegv_handler(_signal: c_int, siginfo: *mut siginfo_t, _extra: *mut c_void) {
    let address = unsafe { (*siginfo).si_addr() } as usize;
    // map pages
}

fn exec(filename: &str) -> Result<(), Box<dyn Error>> {
    println!("Loading ELF file: {}", filename);
    // read ELF segments
    let segments = runner::read_elf_segments(filename)?;

    // print segments

    
    // determine base address

    // determine entry point

    // register SIGSEGV handler


    // run ELF using runner::exec_run

    Ok(())
}

fn main() -> Result<(), Box<dyn Error>> {
    let args: Vec<String> = std::env::args().collect();
    if args.len() != 2 {
        eprintln!("Usage: {} <path-to-executable>", args[0]);
        std::process::exit(1);
    }

    exec(&args[1])?;

    Ok(())
}
